{"ast":null,"code":"import _objectSpread from\"/Users/meghagupta/Desktop/my-teams/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import MyMessage from\"./MyMessage\";import TheirMessage from\"./TheirMessage\";import MessageForm from\"./MessageForm\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatFeed=function ChatFeed(props){// the things that we will be structuring are in the const\nvar chats=props.chats,activeChat=props.activeChat,userName=props.userName,messages=props.messages;// if chat exist then find the chat and the active chat\nvar chat=chats&&chats[activeChat];/* this function is going to take two parameters\n  and inside we are going to map over people and the \n  thing that we are going to render only when person has read the message\n  */var renderReadReceipts=function renderReadReceipts(message,isMyMessage){return chat.people.map(function(person,index){return person.last_read===message.id&&/*#__PURE__*/_jsx(\"div\",{className:\"read-receipt\",style:{float:isMyMessage?\"right\":\"left\",backgroundImage:person.person.avatar&&\"url(\".concat(person.person.avatar,\")\")}},\"read_\".concat(index));});};// this function is for generating messages\nvar renderMessages=function renderMessages(){// for fetching all of our messages\nvar keys=Object.keys(messages);// let's render or messages\nreturn keys.map(function(key,index){/* One specific message is going to be const message */var message=messages[key];/* Ww want to know is this the last message that is sent then we will return null else keys */var lastMessageKey=index===0?null:keys[index-1];/* This we will check that the message sent is by us other person */var isMyMessage=userName===message.sender.username;return/*#__PURE__*/_jsxs(\"div\",{style:{width:\"100%\"},children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-block\",children:isMyMessage?/*#__PURE__*/_jsx(MyMessage,{message:message}):/*#__PURE__*/_jsx(TheirMessage,{message:message,lastMessage:messages[lastMessageKey]})}),/*#__PURE__*/_jsx(\"div\",{className:\"read-receipts\",style:{marginRight:isMyMessage?\"18px\":\"0px\",marginLeft:isMyMessage?\"0px\":\"68px\"},children:renderReadReceipts(message,isMyMessage)})]},\"msg_\".concat(index));});};if(!chat)return/*#__PURE__*/_jsx(\"div\",{});return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-feed\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-title-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-title\",children:chat===null||chat===void 0?void 0:chat.title}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-subtitle\",children:chat.people.map(function(person){return\" \".concat(person.person.username);})})]}),renderMessages(),/*#__PURE__*/_jsx(\"div\",{style:{height:\"100px\"}}),/*#__PURE__*/_jsx(\"div\",{className:\"message-form-container\",children:/*#__PURE__*/_jsx(MessageForm,_objectSpread(_objectSpread({},props),{},{chatId:activeChat}))})]});};export default ChatFeed;","map":{"version":3,"sources":["/Users/meghagupta/Desktop/my-teams/src/chat/src/components/ChatFeed.jsx"],"names":["MyMessage","TheirMessage","MessageForm","ChatFeed","props","chats","activeChat","userName","messages","chat","renderReadReceipts","message","isMyMessage","people","map","person","index","last_read","id","float","backgroundImage","avatar","renderMessages","keys","Object","key","lastMessageKey","sender","username","width","marginRight","marginLeft","title","height"],"mappings":"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","sourcesContent":["import MyMessage from \"./MyMessage\";\nimport TheirMessage from \"./TheirMessage\";\nimport MessageForm from \"./MessageForm\";\n\nconst ChatFeed = (props) => {\n  // the things that we will be structuring are in the const\n  const { chats, activeChat, userName, messages } = props;\n\n  // if chat exist then find the chat and the active chat\n  const chat = chats && chats[activeChat];\n\n  /* this function is going to take two parameters\n  and inside we are going to map over people and the \n  thing that we are going to render only when person has read the message\n  */\n  const renderReadReceipts = (message, isMyMessage) =>\n    chat.people.map(\n      (person, index) =>\n        person.last_read === message.id && (\n          <div\n            key={`read_${index}`}\n            className=\"read-receipt\"\n            style={{\n              float: isMyMessage ? \"right\" : \"left\",\n              backgroundImage:\n                person.person.avatar && `url(${person.person.avatar})`,\n            }}\n          />\n        )\n    );\n\n  // this function is for generating messages\n  const renderMessages = () => {\n    // for fetching all of our messages\n    const keys = Object.keys(messages);\n\n    // let's render or messages\n    return keys.map((key, index) => {\n      /* One specific message is going to be const message */\n      const message = messages[key];\n      /* Ww want to know is this the last message that is sent then we will return null else keys */\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      /* This we will check that the message sent is by us other person */\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: \"100%\" }}>\n          <div className=\"message-block\">\n            {/* If message is sent by us then it will show our message else other person message */}\n            {isMyMessage ? (\n              <MyMessage message={message} />\n            ) : (\n              <TheirMessage\n                message={message}\n                lastMessage={messages[lastMessageKey]}\n              />\n            )}\n          </div>\n          {/* If message is sent by us then we are setting css for it */}\n          <div\n            className=\"read-receipts\"\n            style={{\n              marginRight: isMyMessage ? \"18px\" : \"0px\",\n              marginLeft: isMyMessage ? \"0px\" : \"68px\",\n            }}\n          >\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {/* This will going to be subtitle of our chat */}\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: \"100px\" }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n"]},"metadata":{},"sourceType":"module"}