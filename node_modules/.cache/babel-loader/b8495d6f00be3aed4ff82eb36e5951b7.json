{"ast":null,"code":"var _jsxFileName = \"/Users/meghagupta/Desktop/my-teams/src/chat/src/components/ChatFeed.jsx\";\nimport MyMessage from \"./MyMessage\";\nimport TheirMessage from \"./TheirMessage\";\nimport MessageForm from \"./MessageForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatFeed = props => {\n  // the things that we will be structuring are in the const\n  const {\n    chats,\n    activeChat,\n    userName,\n    messages\n  } = props; // if chat exist then find the chat and the active chat\n\n  const chat = chats && chats[activeChat];\n  /* this function is going to take two parameters\n  and inside we are going to map over people and the \n  thing that we are going to render only when person has read the message\n  */\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"read-receipt\",\n    style: {\n      float: isMyMessage ? \"right\" : \"left\",\n      backgroundImage: person.person.avatar && `url(${person.person.avatar})`\n    }\n  }, `read_${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 11\n  }, this)); // this function is for generating messages\n\n\n  const renderMessages = () => {\n    // for fetching all of our messages\n    const keys = Object.keys(messages); // let's render or messages\n\n    return keys.map((key, index) => {\n      /* One specific message is going to be const message */\n      const message = messages[key];\n      /* Ww want to know is this the last message that is sent then we will return null else keys */\n\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      /* This we will check that the message sent is by us other person */\n\n      const isMyMessage = userName === message.sender.username;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-block\",\n          children: isMyMessage ? /*#__PURE__*/_jsxDEV(MyMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(TheirMessage, {\n            message: message,\n            lastMessage: messages[lastMessageKey]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"read-receipts\",\n          style: {\n            marginRight: isMyMessage ? \"18px\" : \"0px\",\n            marginLeft: isMyMessage ? \"0px\" : \"68px\"\n          },\n          children: renderReadReceipts(message, isMyMessage)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, `msg_${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  if (!chat) return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: chat === null || chat === void 0 ? void 0 : chat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-subtitle\",\n        children: chat.people.map(person => ` ${person.person.username}`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), renderMessages(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-form-container\",\n      children: /*#__PURE__*/_jsxDEV(MessageForm, { ...props,\n        chatId: activeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChatFeed;\nexport default ChatFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFeed\");","map":{"version":3,"sources":["/Users/meghagupta/Desktop/my-teams/src/chat/src/components/ChatFeed.jsx"],"names":["MyMessage","TheirMessage","MessageForm","ChatFeed","props","chats","activeChat","userName","messages","chat","renderReadReceipts","message","isMyMessage","people","map","person","index","last_read","id","float","backgroundImage","avatar","renderMessages","keys","Object","key","lastMessageKey","sender","username","width","marginRight","marginLeft","title","height"],"mappings":"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","sourcesContent":["import MyMessage from \"./MyMessage\";\nimport TheirMessage from \"./TheirMessage\";\nimport MessageForm from \"./MessageForm\";\n\nconst ChatFeed = (props) => {\n  // the things that we will be structuring are in the const\n  const { chats, activeChat, userName, messages } = props;\n\n  // if chat exist then find the chat and the active chat\n  const chat = chats && chats[activeChat];\n\n  /* this function is going to take two parameters\n  and inside we are going to map over people and the \n  thing that we are going to render only when person has read the message\n  */\n  const renderReadReceipts = (message, isMyMessage) =>\n    chat.people.map(\n      (person, index) =>\n        person.last_read === message.id && (\n          <div\n            key={`read_${index}`}\n            className=\"read-receipt\"\n            style={{\n              float: isMyMessage ? \"right\" : \"left\",\n              backgroundImage:\n                person.person.avatar && `url(${person.person.avatar})`,\n            }}\n          />\n        )\n    );\n\n  // this function is for generating messages\n  const renderMessages = () => {\n    // for fetching all of our messages\n    const keys = Object.keys(messages);\n\n    // let's render or messages\n    return keys.map((key, index) => {\n      /* One specific message is going to be const message */\n      const message = messages[key];\n      /* Ww want to know is this the last message that is sent then we will return null else keys */\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      /* This we will check that the message sent is by us other person */\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: \"100%\" }}>\n          <div className=\"message-block\">\n            {/* If message is sent by us then it will show our message else other person message */}\n            {isMyMessage ? (\n              <MyMessage message={message} />\n            ) : (\n              <TheirMessage\n                message={message}\n                lastMessage={messages[lastMessageKey]}\n              />\n            )}\n          </div>\n          {/* If message is sent by us then we are setting css for it */}\n          <div\n            className=\"read-receipts\"\n            style={{\n              marginRight: isMyMessage ? \"18px\" : \"0px\",\n              marginLeft: isMyMessage ? \"0px\" : \"68px\",\n            }}\n          >\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {/* This will going to be subtitle of our chat */}\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: \"100px\" }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n"]},"metadata":{},"sourceType":"module"}